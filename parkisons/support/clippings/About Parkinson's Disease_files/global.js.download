(function ($) {
  $(function () {

    /*
     * COMPONENT SCRIPTING: paragraph--image-slider.html.twig
     */
    function Component_ImageSlider() {

      $.each($('.component.image-slider'), function (i, el) {

        // Hook the current element...
        var self = $($(el).get(0));
        // console.log("self: ", self);

        // Hook the application/json tag, or exit...
        var json = self.find('script[type="application/json"]');
        // console.log("json: ", json);
        if (!json.length) return;

        // Parse the contents of the application/json tag...
        var config = $.parseJSON($(json.get(0)).html());
        // console.log("config: ", config)

        // Handle each rule as needed...
        if (config.imageCount > 0) {
          // Logic for slider in here (only activate slider when there is more than one image)
        }

      });

    }

    Component_ImageSlider();

    // This is being commented out because another approach is being used in global.css that allows for no wrapping of the link arrow without copy.
    // $('a.arrow').append('<i class="fas fa-angle-right"></i>');

    $('.search-block').append('<i class="fas fa-search"></i>');
    $('li.phone a').prepend('<i class="fas fa-phone"></i>');
    $('li.fax a').prepend('<i class="fas fa-fax"></i>');
    $('li.email a').prepend('<i class="fas fa-envelope"></i>');

    /* Blockquote custom support
    $('blockquote > p').each(function () {
      var text = $(this).text().trim();
      // console.log("text: ", text);
      // console.log("text.length: ", text.length);
      if (text.length > 0) {
        if (text.indexOf('"') == 0) text = text.substring(1, text.length);
        if (text.lastIndexOf('"') == text.length - 1) text = text.substring(0, text.length - 1);
        $(this).text('“' + text + '”');
      }
    });*/

    /*
     * COMPONENT SCRIPTING: paragraph--expandable-text.html.twig
     */
    function Component_ExpandableText() {

      $('.component.expandable-text').each(function (i) {

        // Snag the elements...
        var Component = $(this);
        var Content = Component.find('.content');
        var Controls = Component.find('.readmore-controls');

        // Skip non-expandable content...
        if (!Content.hasClass('readmore')) return;

        // Keep track of heights...
        var NativeHeight = 0;
        var CollapsedHeight = 0;

        // Reusable utility function for reflowing height values...
        function Reflow() {

          // Retrieve the native height...
          NativeHeight = Content.stop().css({'height': ''}).outerHeight();

          // Retrieve the collapsed height...
          CollapsedHeight = 250;
          if (Foundation.MediaQuery.atLeast('medium')) CollapsedHeight = 450;
          if (Foundation.MediaQuery.atLeast('large')) CollapsedHeight = 650;

          // Prevent redundant expander behavior...
          if (CollapsedHeight >= NativeHeight) {
            CollapsedHeight = NativeHeight;
            Content.addClass('compacted');
          } else {
            Content.removeClass('compacted');
          }

          // Resize already collapsed content...
          if (!Content.hasClass('readmore-active')) {
            Content.stop().css({'height': CollapsedHeight});
          }

        }

        $(window).on('resize', function () {
          Reflow();
        });
        Reflow();

        // Toggle actions...
        Controls.find('button').on('click', function (e) {

          // Toggle the class...
          Content.toggleClass('readmore-active');

          // Transition to the appropriate height...
          if (Content.hasClass('readmore-active')) {
            Content.css({'height': CollapsedHeight}).animate({'height': NativeHeight});
          } else {
            Content.css({'height': NativeHeight}).animate({'height': CollapsedHeight});
          }

        });

      });

    }

    Component_ExpandableText();

    // WYSIWYG Field Inline Image Caption and Layout Data Attribute Support
    $('img[data-align], img[data-caption]').wrap('<figure class="inline-img-wrapper"></figure>');
    $('img[data-align="center"]').each(function () {
      $(this).parent().addClass("center");
    });
    $('img[data-align="left"]').each(function () {
      $(this).parent().addClass("left");
    });
    $('img[data-align="right"]').each(function () {
      $(this).parent().addClass("right");
    });
    $('img[data-caption]').each(function () {
      var el = $(this);
      var caption = el.data('caption');
      // console.log("caption: ", caption);
      el.after('<figcaption class="caption-text"><small>' + caption + '</small></figcaption>');
    });


    // Biography Finder - Get Search Query Parameters
    $(".biography-finder .search-input input").keyup(function (e) {
      if (e.which == 13) {
        let search_params = $(this).val().split(' ').join('+')
        // console.log($(this).val().split(' ').join('+'));
        go_to_search(search_params);
      }
    });
    $(".biography-finder .search-input #go-to-search").on('click', function () {
      let search_params = $(this).siblings('input').val().split(' ').join('+')
      // console.log($(this).siblings('input').val().split(' ').join('+'));
      go_to_search(search_params);
    });

    function go_to_search(params) {
      window.location.href = decodeURI('/search?terms=' + params);
    }

    // Hide Anchor Slug help text
    $('div#slug-preview').find('span:not(#slug)').on('click', function () {
      $(this).parent('#slug-preview').css('display', 'none');
    })
    // Smooth Scroll for Anchor Slugs
    $('a[href*="#"]:not([href="#"])').click(function () {

      var offset = 0;
      if (Foundation.MediaQuery.atLeast('large')) {
        offset = -$('header#masthead').height();
      }

      var hash = this.hash;

      if (location.hostname == this.hostname) {
        if (location.pathname == this.pathname) {
          $('html,body').stop().animate({
            scrollTop: $(hash).offset().top + offset
          }, 'linear');
        }
      }
    });
    // Scroll to Anchor on Page Load
    $(window).on('load', function () {
      if (location.hash) {

        var target = $(location.hash);

        if (target.length) {
          var offset = 0;

          if (Foundation.MediaQuery.atLeast('large')) {
            offset = -$('header#masthead').height();
          }

          setTimeout(function () {
            window.scrollTo(0, 0);

            $('html,body').stop().animate({
              scrollTop: target.offset().top + offset
            }, 'linear');

          }, 1);
        }
      }

    });

    // Archive
    $('.archived-content-end').parents('main').addClass('archived-content');

    var archive_notice = 'This page has been archived and is provided for historical reference purposes only. The content and links are no longer maintained and may now be outdated.'
    var archive_markup = '';
    archive_markup += '<div id="archive-notice">';
    archive_markup += '<div class="notice-container">';
    archive_markup += '<div class="notice-wrapper">';
    archive_markup += '<p class="notice-text">' + archive_notice + '</p>';
    archive_markup += '</div>';
    archive_markup += '</div>';
    archive_markup += '</div>';

    $('main.archived-content').siblings('footer').after(archive_markup);

    //MAILCHIMP FOOTER FORM
    var formChecker = setInterval(function () {
      // Check for element availability
      if ($('#footer #block-mailchimp-form input[type="email"]').length > 0) {
        initMailChimpFooterForm();
        clearInterval(formChecker);
      }
    }, 300);

    function initMailChimpFooterForm() {
      // Attach email input placeholder
      $('#footer #block-mailchimp-form input[type="email"]').attr('placeholder', 'Email address...');
      // Check interest group boxes
      $('#footer #block-mailchimp-form [data-drupal-selector^="edit-mailchimp-lists-interest-groups-"] input[type="checkbox"]').prop('checked', true);
    }

    // Check scroll position on page load (for breadcrumbs)
    checkScroll();

    // Event to manage 'scrolled' class on scroll (for breadcrumbs)
    $(window).scroll(function () {
      checkScroll();
    });

    // Function for adding 'scrolled' class when past a certain scroll point (for breadcrumbs)
    function checkScroll() {
      var scroll = $(window).scrollTop();
      if (scroll > 64) {
        $('body').addClass("scrolled");
      } else {
        $('body').removeClass("scrolled");
      }
    }

    // JUICER SOCIAL (FOOTER SOCIAL FEED) FUNCTIONALITY
    var feedItemsData = [];
    var socialPosts = [];
    var socialDock = $('#footer .social-dock');
    var charLimit = 100;

    $.when(detectJuicerSocial()).then(function () {
      return getSocialData();
    }).then(function () {
      return assignSocialData();
    }).then(function () {
      return constructSocialColumn(socialDock);
    }).then(function () {
      return constructSocialTiles(socialDock);
    }).catch(function (err) {
      console.error("Something may have gone wrong: ", err);
    });

    function detectJuicerSocial() {
      var deferred = $.Deferred();

      var checkForJuicerFeed = setInterval(function () {
        if ($('.feed-item').length > 0) {
          clearInterval(checkForJuicerFeed);
          deferred.resolve();
        }
      }, 300);

      return deferred.promise();
    }

    function getSocialData() {
      // Grab needed data from each feed item
      $('.feed-item').each(function () {
        var feedItemData = {};

        feedItemData.source = $(this).data("source");
        feedItemData.messageHTML = $(this).find(".j-message").html();

        // Remove unwanted content before grabbing text
        $(this).find(".j-retweet").remove();
        feedItemData.messageText = $(this).find(".j-message").text();

        feedItemData.imgSrc = $(this).find(".j-image").data('image');
        feedItemData.imgHref = $(this).find(".j-image").attr('href');
        feedItemData.postHref = null;

        // For Twitter feed items without images
        if (!feedItemData.imgSrc) {
          feedItemData.postHref = $(this).find(".j-poster a.j-social").attr('href');
        }

        feedItemsData.push(feedItemData);
      });
    }

    function assignSocialData() {
      // Assign data
      for (var i = 0; i < 3; i++) {
        var socialPost = {};

        socialPost.type = feedItemsData[i].source;
        socialPost.image = feedItemsData[i].imgSrc;
        socialPost.imageHref = feedItemsData[i].imgHref;
        socialPost.messageHTML = feedItemsData[i].messageHTML;
        socialPost.text = feedItemsData[i].messageText;
        socialPost.postHref = feedItemsData[i].postHref;

        socialPosts.push(socialPost);
      }
    }

    function constructSocialColumn(el) {

      var cells = [];
      for (var i = socialPosts.length - 1; i >= 0; i--) {

        // Non-slider approach; stack content in single column
        if (socialPosts[i].imageHref) {
          cells.unshift(
            $('<div class="cell"></div>').append([
              $('<a class="img-link" href="' + socialPosts[i].imageHref + '" target="_blank"><img src="' + socialPosts[i].image + '" alt=""/></a>'),
              $('<a class="img-link" href="' + socialPosts[i].imageHref + '" target="_blank"><div class="msg">' + socialPosts[i].text + '</div></a>')
            ])
          );
        } else {
          cells.unshift(
            $('<div class="cell"></div>').append([
              $('<div class="msg"></div>').append([
                $('<a class="img-link" href="' + socialPosts[i].postHref + '" target="_blank"><div>' + socialPosts[i].text + '</div></a>')
              ])
            ])
          );
        }
      }

      el.append([
        $('<div class="hide-for-medium grid-x social-stack" aria-label="Social Media Feed" ></div>').append(cells)
      ]);

    }

    function constructSocialTiles(el) {

      var cells = [];
      for (var i = socialPosts.length - 1; i >= 0; i--) {

        if (socialPosts[i].imageHref) {
          cells.unshift(
            $('<div class="cell small-4 tile ' + socialPosts[i].type + '"></div>').append([
              $('<div class="tile-interior"></div>').append([
                //$( '<a class="img-link" href="'+socialPosts[ i ].imageHref+'" target="_blank"><img src="'+socialPosts[ i ].image+'" alt=""></a>' ),
                $('<a class="img-link" href="' + socialPosts[i].imageHref + '" target="_blank"><div class="social-img-bg" style="background-image:url(' + socialPosts[i].image + ')"></div></a>'),
              ])
            ])
          );
        } else {
          cells.unshift(
            $('<div class="cell small-4 tile ' + socialPosts[i].type + '"></div>').append([
              $('<div class="tile-interior"></div>').append([
                $('<div class="tile-text"></div>').append([
                  $('<a class="txt-link" href="' + socialPosts[i].postHref + '" target="_blank"><div>' + truncate(socialPosts[i].text, charLimit) + '</div></a>')
                ])
              ])
            ])
          );
        }
      }

      el.append([
        $('<div class="show-for-medium grid-x"></div>').append(cells)
      ]);

    }

    function truncate(string, charLimit) {
      if (string.length > charLimit)
        return string.substring(0, charLimit) + '...';
      else
        return string;
    };

    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth < 639) {
      //Clone Language Switch
      $(".full-page-slide, .basic-hero, .folded-hero, .article-hero").first().after($('.mobile .grid-container.language-switch').clone())
      $('.language-switch.nav .language-switch').removeClass('grid-container');
      //End Language Switch

      //Content Accordion
      if ($('.accordion-item').length == 1 || $('.full-page-slide').length > 1) {
        //Disable accordion if we have only one section
        $('.accordion-item').addClass('accordion-disable');
        $('.interior > .grid-container .hide-for-small-only ').removeClass('hide-for-small-only');
      }
      //Check if Intro Text, Bio Dossior or Article Intro is missing
      if ($('.intro-text, .biography-dossier, .article-intro').length === 0) {
        if ($('.accordion-item').length > 1) {
          $('.accordion-item').first().css({'margin-top': '38px'});
          $('.link-columns').css({'display': 'none'});
        } else {
          $('.accordion-item').addClass('accordion-disable');
          $('.interior > .grid-container .hide-for-small-only ').removeClass('hide-for-small-only');
        }
      }
      $('.accordion-item').last().css({"border-bottom": "1px solid #ebebeb", "margin-bottom": "38px"});
    } else {
      //Bio with Data
      jQuery('li.accordion-item').removeClass('accordion-item')
      jQuery('.accordion-content').removeClass('accordion-content');
    }

    // Breadcrumbs
    $('.breadcrumb-main.show-for-small-only').removeClass('hide');
    if (jQuery('.crumb-parent a').length == 0) {
      $('.drop-arrow-container').css({'display': 'none'});
    } else {
      $('.link-block.current-block').click(function () {
        $('.link-block.collapsed').slideToggle();
        $('.drop-arrow-container').find('svg').toggleClass('fa fa-chevron-down fa fa-chevron-up');
        var childs = $('.link-block.collapsed').length;
        $('.current-page').toggleClass('add-padding remove-padding');
      });
    }

    // Auto-close messages after 2 seconds
    // if( $('div[data-closable]').is(':visible') ) {
    //   setTimeout(function () {
    //     $( "button.close-button" ).click();
    //   },2500);
    // };

    // Back to top button
    var btn = $('#button_backtotop');

    $(window).scroll(function () {
      if ($(window).scrollTop() > 300) {
        btn.fadeIn("fast");
      } else {
        btn.fadeOut("fast");
      }
    });

    btn.on('click', function (e) {
      e.preventDefault();
      $('html, body').animate({scrollTop: 0}, '300');
    });

    //ToDo "Reduce conditions"
    $(window).on("resize", function () {
      $mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      var windowheight = jQuery(window).height();
      var windowWidth = jQuery(window).width();
      // var height = (windowheight - 185) * 0.8;
      if (windowWidth < 1280 && windowheight < 720 || $mobile) {
        var containerWidth2 = jQuery('.interior .grid-container').width();
        jQuery(".video-page iframe.media-oembed-content").width(containerWidth2);
        jQuery('.video-page iframe.media-oembed-content').height(containerWidth2 / 100 * 56.25);
      } else if (windowWidth > 1280 && windowheight > 875) {
        var containerWidth2 = jQuery('.interior .grid-container').width();
        var videoWidth2 = containerWidth2 * 0.9;
        jQuery(".video-page iframe.media-oembed-content").width(videoWidth2);
        jQuery('.video-page iframe.media-oembed-content').height(videoWidth2 / 100 * 56.25);
      } else if (windowWidth > 1280 && windowheight < 875 || windowheight > 719 && windowheight < 960) {
        var containerWidth2 = jQuery('.interior .grid-container').width();
        var videoWidth2 = containerWidth2 * 0.7;
        jQuery(".video-page iframe.media-oembed-content").width(videoWidth2);
        jQuery('.video-page iframe.media-oembed-content').height(videoWidth2 / 100 * 56.25);
      }
    }).resize();
    jQuery('.component.dynamic-events').last().addClass('last');
    jQuery('#mce-EMAIL').css('width', '100%');

  });
  // Adds Readmore for genomic Cases
  // Adds Readmore for genomic Cases
  document.addEventListener('DOMContentLoaded', function () {
    const panels = document.querySelectorAll('.tabs-panel');

    panels.forEach(panel => {
      const shortTextElement = panel.querySelector('.short-text');
      const fullTextElement = panel.querySelector('.full-text');
      const readMoreLink = panel.querySelector('.read-more');
      const collapseLink = panel.querySelector('.collapse');

      // Check if the necessary elements exist
      if (shortTextElement && fullTextElement && readMoreLink && collapseLink) {
        if (fullTextElement.textContent.length > 240) {
          readMoreLink.style.display = 'inline';

          readMoreLink.addEventListener('click', function (event) {
            event.preventDefault();
            fullTextElement.style.display = 'inline';
            shortTextElement.style.display = 'none';
            readMoreLink.style.display = 'none';
            collapseLink.style.display = 'inline';
          });

          collapseLink.addEventListener('click', function (event) {
            event.preventDefault();
            fullTextElement.style.display = 'none';
            shortTextElement.style.display = 'inline';
            readMoreLink.style.display = 'inline';
            collapseLink.style.display = 'none';
          });
        }
      }
    });
  });

})(jQuery);
//Genomic Accomplishment
Drupal.behaviors.AjaxEvent = {
  attach: function (context, settings) {
    jQuery('input[name=pub_from]').clone().attr('type', 'date').insertAfter('input[name=pub_from]').prev().remove();
    jQuery('input[name=pub_to]').clone().attr('type', 'date').insertAfter('input[name=pub_to]').prev().remove();
  }
}

